{"version":3,"sources":["webpack:///webpack/bootstrap 6f0c922ae3589135552f","webpack:///./test.js","webpack:///./index.js","webpack:///./vm.js","webpack:///./observe.js","webpack:///(webpack)/buildin/module.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,4CAA2C,cAAc;AACzD,MAAK;AACL;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,4CAA2C,cAAc;AACzD;AACA;AACA;AACA,EAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA,EAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,qBAAoB,KAAK,GAAG,KAAK,GAAG,OAAO;AAC3C,MAAK;AACL;AACA;AACA;AACA;AACA,EAAC,C;;;;;;AC5FD;AACA;AACA;AACA;;AAEA,0B;;;;;;ACLA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA8B,6BAA6B;AAC3D;AACA;AACA,wDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,iBAAiB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB,kCAAiC,gCAAgC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,uCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,iCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,gDAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,4CAA2C,4BAA4B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,wCAAuC,yBAAyB;AAChE;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,uCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAA+B,gBAAgB;AAC/C;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,2DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0B;;;;;;mEC5dA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,8EAA6E,SAAS;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC,6B;;;;;;;AC3LD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"./dist/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 6f0c922ae3589135552f\n **/","/**\r\n * Created by li_xiaoliang on 2015/8/18.\r\n */\r\nvar binding = require(\".\");\r\nbinding({\r\n    id: \"example1\",\r\n    data: {\r\n        text: \"\"\r\n    },\r\n    clickText: function () {\r\n        this.text++;\r\n    }\r\n})\r\n\r\nbinding({\r\n    id: \"example2\",\r\n    data: {\r\n        left: \"\",\r\n        right: \"\",\r\n        sum: \"\"\r\n    },\r\n    sum: function () {\r\n        this.sum = parseInt(this.left) + parseInt(this.right);\r\n    },\r\n    multiply: function (data) {\r\n        this.sum *= data;\r\n    }\r\n})\r\n\r\nbinding({\r\n    id: \"example3\",\r\n    data: {\r\n        data: \"\"\r\n    }\r\n})\r\n\r\nbinding({\r\n    id: \"example5\",\r\n    data: {\r\n        ctn: \"\"\r\n    },\r\n    inputChanged: function (name, newvalue, oldvalue) {\r\n        this.callbind(\"example6\", \"data\", {ctn: newvalue});\r\n    },\r\n    test: function (data) {\r\n        console.log(\"I AM TEST　\" + data)\r\n    }\r\n})\r\n\r\nbinding({\r\n    id: \"example6\",\r\n    data: {\r\n        ctn: \"\"\r\n    },\r\n    inputChanged: function (name, newvalue, oldvalue) {\r\n        //调用实例的data对象\r\n        this.callbind(\"example5\", \"data\", {ctn: newvalue});\r\n        //也可以这么调用实例的方法，\r\n        this.callbind(\"example5\", \"test\", [newvalue]);\r\n    }\r\n})\r\n\r\n\r\nbinding({\r\n    id: \"example7\",\r\n    data: {\r\n        text: \"TEST\"\r\n    }\r\n})\r\n\r\n\r\n//测试 _bind\r\nbinding({\r\n    id: \"example-1\",\r\n    data: {\r\n        text: \"\"\r\n    },\r\n    clickText: function () {\r\n        this.text++;\r\n    }\r\n})\r\n\r\nbinding({\r\n    id: \"example8\",\r\n    data: {\r\n        items: [1, 2, 3],\r\n        itemObjs: [{a: 1}, {a: 2}, {a: 'a'}]\r\n    },\r\n    itemClick: function (n) {\r\n        console.log(n);\r\n        this.items.push(1);\r\n    }\r\n})\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./test.js\n ** module id = 0\n ** module chunks = 0\n **/","/**\r\n * Created by li_xiaoliang on 2015/9/20.\r\n */\r\nvar binding = require(\"./vm\");\r\n\r\nmodule.exports = binding;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 1\n ** module chunks = 0\n **/","/**\r\n * Created by li_xiaoliang on 2015/7/25.\r\n */\r\nvar observe = require(\"./observe\");\r\n\r\nvar binding = function (args) {\r\n    //用于标识binding中文本节点的id\r\n    var textnodeid = 0;\r\n    //保存存在变量的文本节点\r\n    var textnodes = {};\r\n    //文本变量和对应的nodeid，\r\n    var textVariables = {};\r\n    //_class表达式\r\n    var classFuncs = {};\r\n    //由于中文的输入法对导致监听oninput事件时触发事件，所以需要在输入input时数据保存到data上下文但是不触发observe更新，所以这里需要一个指示flag\r\n    var inputing = false;\r\n    var _binding = function (args) {\r\n        this.args = args;\r\n        this.obserData(args);\r\n        args.data[\"callbind\"] = this.callbind;\r\n        var top = document.getElementById(args.id);\r\n        //   遍历节点\r\n        this.traversalAndMount(top);\r\n        //    执行初始化操作init\r\n        if (args.init) {\r\n            args.init.apply(args.data);\r\n        }\r\n    }\r\n\r\n    _binding.prototype = {\r\n        //挂载方法\r\n        mount: function (element, args) {\r\n            for (var i = 0, d; d = element.attributes[i++];) {\r\n                //找到特性属性，以_开头\r\n                if (startWith(d.name, \"_\")) {\r\n                    //因为repeat模式下的特点，_bind对象不能转化Wie{{}}形式，所以先查找repeat对象，在转换_bind值\r\n                    if (d.name === \"_repeat\") {\r\n                        this._repeat(element, d.value, args);\r\n                    }\r\n                    if (d.name === \"_bind\") {\r\n                        if (d.value.indexOf(\"'\") > -1 || d.value.indexOf('\"') > -1 || /^[0-9]*$/.test(d.value))\r\n                            element.innerHTML = d.value.replace(/'/g, \"\");\r\n                        else\r\n                            element.innerHTML = \"{{\" + d.value + \"}}\"\r\n                    }\r\n                    if (d.name === \"_click\") {\r\n                        this._click(element, d.value, args);\r\n                    }\r\n                    if (d.name == \"_class\") {\r\n                        var express = d.value.split(\",\");\r\n                        this._class(element, express);\r\n                    }\r\n                    if (d.name == \"_model\") {\r\n                        this._model(element, d.value)\r\n                    }\r\n                    if (d.name == \"_change\") {\r\n                        this._change(element, d, args);\r\n                    }\r\n                    //使用select元素时，这个值绑定选定的option值\r\n                    if (d.name == \"_selected\") {\r\n                        this._selected(element, d.value)\r\n                    }\r\n                }\r\n            }\r\n            //查找{{}}文字节点，\r\n            for (var j = 0, node; node = element.childNodes[j++];) {\r\n                if (node.nodeType === 3 && node.data.trim() !== \"\") {\r\n                    textnodes[textnodeid] = {};\r\n                    textnodes[textnodeid][\"node\"] = node;\r\n                    //保存此node下的文本变量\r\n                    var matchs = [];\r\n                    var t = \"''\";\r\n                    var offset = 0;\r\n                    var text = \"\";\r\n                    node.data = node.data.replace(/\\n/g, \"\");\r\n                    node.data = node.data.replace(/{{(.*?)}}/g, function (match, value, index, str) {\r\n                        //保存可以动态更新的变量\r\n                        //保存变量对应的nodeid\r\n                        //双花括号里可能是'a'或者是数字，这种情况下直接显示它们\r\n                        if (value.indexOf(\"'\") > -1 || /^[0-9]*$/.test(value)) {\r\n                            return value.replace(/'/g, \"\");\r\n                        } else if (args.data[value] != undefined) {\r\n                            if (!textVariables[value]) {\r\n                                textVariables[value] = [];\r\n                            }\r\n                            dupArrayByAdd(matchs, value);\r\n                            t = t + \"+'\" + str.substring(offset, index) + \"'+\" + value;\r\n                            dupArrayByAdd(textVariables[value], textnodeid);\r\n                            offset = index + match.length;\r\n                            text = str;\r\n                            return args.data[value];\r\n                        } else {\r\n                            return match;\r\n                        }\r\n                    })\r\n                    t = t + \"+'\" + text.substring(offset, text.length) + \"'\";\r\n                    var tt = new Function(matchs.join(\",\"), \"return \" + t);\r\n                    textnodes[textnodeid][\"func\"] = tt;\r\n                    textnodes[textnodeid][\"params\"] = matchs;\r\n                    textnodeid++;\r\n                }\r\n            }\r\n        },\r\n        _click: function (element, value, args) {\r\n            //    解析字符串，获取函数名和方法参数，判断参数是变量还是字符串\r\n            var funcName = value.substr(0, value.indexOf(\"(\"));\r\n            var paramStr = value.substring(value.indexOf(\"(\") + 1, value.length - 1);\r\n            var params = paramStr.split(\",\");\r\n            element.onclick = function (event) {\r\n                //不冒泡\r\n                if (event.stopPropagation) {\r\n                    event.stopPropagation();\r\n                } else {\r\n                    event.cancelBubble = true;\r\n                }\r\n                var p = [];\r\n                for (var j = 0, param; param = params[j++];) {\r\n                    //如果符合字符串，则去掉单引号后把该字符串push进数组，否则是变量\r\n                    //如果是字符\r\n                    if (param.indexOf(\"'\") > -1) {\r\n                        p.push(param.substr(1, param.length - 2));\r\n                    }\r\n                    //数字\r\n                    else if (/^[0-9]*$/.test(param)) {\r\n                        p.push(parseInt(param));\r\n                    }\r\n                    else {\r\n                        p.push(args.data[param]);\r\n                    }\r\n                }\r\n                args[funcName].apply(args.data, p);\r\n            }\r\n        },\r\n        _class: function (element, express) {\r\n            //解析_class表达式  red:1+2==3 左边类，右边表达式\r\n            for (var j = 0, str; str = express[j++];) {\r\n                var _class = str.substr(0, str.indexOf(\":\"));\r\n                var exs = str.substring(str.indexOf(\":\") + 1);\r\n                //扫描表达式，查找args里的参数，并当做参数传入表达式\r\n                var ps = this.extractParam(exs);\r\n                if (ps.length > 0) {\r\n                    var pstr = ps.join(\",\");\r\n                    var func = new Function(pstr, \"return \" + exs);\r\n                    //初始化样式\r\n                    var params = [];\r\n                    for (var i = 0; i < ps.length; i++) {\r\n                        params.push(args.data[ps[i]]);\r\n                    }\r\n                    var result = func.apply(null, params);\r\n                    result ? addClass(element, _class) : removeClass(element, _class);\r\n                    //存入binding.classFuncs\r\n                    if (!classFuncs[pstr]) {\r\n                        classFuncs[pstr] = [];\r\n                    }\r\n                    classFuncs[pstr].push({\r\n                        _element: element,\r\n                        _class: _class,\r\n                        _func: func,\r\n                        _params: ps\r\n                    });\r\n                } else {\r\n                    //    无参数，可是你为什么要写一个无参数的表达式呢？(还真需要)\r\n                    //    在repeat标签的时候，class表达式的变量被确定，所以在这里是无参数\r\n                    var func = new Function(\"return \" + exs);\r\n                    var result = func();\r\n                    result ? addClass(element, _class) : removeClass(element, _class);\r\n                }\r\n            }\r\n        },\r\n        //从表达式里抽取现有的参数\r\n        extractParam: function (express) {\r\n            var params = [];\r\n            for (var s in args.data) {\r\n                //获取非函数变量\r\n                if (args.data.hasOwnProperty(s) && !isFunction(args.data[s])) {\r\n                    //匹配一个变量\r\n                    var rgx = new RegExp(\"(^|\\\\W)(\" + s + \"(\\\\.\\\\w+)*(?!'))(\\\\W|$)\", \"g\");\r\n                    if (rgx.test(express)) {\r\n                        params.push(s);\r\n                    }\r\n                }\r\n            }\r\n            return params;\r\n        },\r\n        //监听字符串，主要在处理{{文本}}\r\n        obserData: function (args) {\r\n            //监听双向等绑定文本\r\n            observe(args.data, function (name, newvalue, oldvalue) {\r\n                var tv = textVariables[name];\r\n                if (tv) {\r\n                    for (var i = tv.length - 1; i > -1; i--) {\r\n                        var textnode = textnodes[tv[i]];\r\n                        //如果是input类型\r\n                        if (textnode.type == \"input\") {\r\n                            //textnode.node.value = \"\";\r\n                            if (!inputing)\r\n                                textnode.node.value = args.data[textnode.variable];\r\n                        } else {\r\n                            var params = [];\r\n                            for (var j = 0; j < textnode.params.length; j++) {\r\n                                params.push(args.data[textnode.params[j]]);\r\n                            }\r\n                            textnode.node.data = textnode.func.apply(null, params);\r\n                        }\r\n                    }\r\n                    //    同时暴露该事件\r\n                    if (args[\"inputChanged\"]) {\r\n                        args[\"inputChanged\"].apply(args.data, [name, newvalue, oldvalue]);\r\n                    }\r\n                }\r\n            })\r\n            //    监听_class中变量的变化导致class的变化\r\n            observe(args.data, function (name, value, oldvale) {\r\n                if (classFuncs[name] && classFuncs[name].length > 0) {\r\n                    forEach(classFuncs[name], function (index, item, arr) {\r\n                        var params = [];\r\n                        for (var i = 0; i < item._params.length; i++) {\r\n                            params.push(args.data[item._params[i]]);\r\n                        }\r\n                        var result = item._func.apply(null, params);\r\n                        result ? addClass(item._element, item._class) : removeClass(item._element, item._class);\r\n                    })\r\n                }\r\n            })\r\n        },\r\n        _model: function (element, prop) {\r\n            var self = this;\r\n            //初始化input值\r\n            element.value = self.args.data[prop] || \"\";\r\n            //    监听输入时间\r\n            var regx = /( *)/g;\r\n            element.oninput = function (evt) {\r\n                inputing = true;\r\n                self.args.data[prop] = this.value;\r\n                inputing = false;\r\n            }\r\n            //    增加点击事件，用于阻止事件冒泡\r\n            element.onclick = function (event) {\r\n                if (event.stopPropagation) {\r\n                    event.stopPropagation();\r\n                } else {\r\n                    event.cancelBubble = true;\r\n                }\r\n            }\r\n\r\n            var nodeid = textnodeid++;\r\n            textnodes[nodeid] = {node: element, type: \"input\", variable: prop};\r\n            if (!textVariables[prop]) {\r\n                textVariables[prop] = [];\r\n            }\r\n            dupArrayByAdd(textVariables[prop], nodeid);\r\n        },\r\n        _change: function (element, d, args) {\r\n            var str = d.value;\r\n            var funcName = str.substr(0, str.indexOf(\"(\"));\r\n            var paramStr = str.substring(str.indexOf(\"(\") + 1, str.length - 1);\r\n            var params = paramStr.split(\",\");\r\n            element.onchange = function (event) {\r\n                //不冒泡\r\n                if (event) {\r\n                    if (event.stopPropagation) {\r\n                        event.stopPropagation();\r\n                    } else {\r\n                        event.cancelBubble = true;\r\n                    }\r\n                }\r\n                var p = [];\r\n                for (var j = 0, param; param = params[j++];) {\r\n                    //如果符合字符串，则去掉单引号后把该字符串push进数组，否则是变量\r\n                    //如果是字符\r\n                    if (param.indexOf(\"'\") > -1) {\r\n                        p.push(param.substr(1, param.length - 2));\r\n                    }\r\n                    //数字\r\n                    else if (/^[0-9]*$/.test(param)) {\r\n                        p.push(parseInt(param));\r\n                    }\r\n                    else {\r\n                        p.push(args.data[param]);\r\n                    }\r\n                }\r\n                if (args[funcName]) {\r\n                    args[funcName].apply(args.data, p);\r\n                }\r\n            }\r\n        },\r\n        _selected: function (element, value) {\r\n            //由于监听事件还未开始，所以这里设置不会反应到前台，所以需要实现一个\r\n            //等待事件触发队列，等待监听开始时去扫描等待序列并逐个触发它们，明天做\r\n            this.args.data.data = 2;\r\n            var self = this;\r\n            //初始化\r\n            self.args.data[value] = element.options[element.options.selectedIndex].value;\r\n            element.onchange = function () {\r\n                self.args.data[value] = this.options[this.options.selectedIndex].value;\r\n            }\r\n        },\r\n        _repeat: function (element, value, args) {\r\n            var iteration = value.substring(0, value.indexOf(\"in\") - 1);\r\n            value = value.substring(value.indexOf(\"in\") + 3);\r\n            var clone = element.cloneNode(true);\r\n            var parent = element.parentNode.cloneNode(true);\r\n            var target;\r\n            //因为要在dom外操作节点，所以需要找到clone父节点的repeat节点进行操作\r\n            for (var i = 0, len = parent.children.length; i < len; i++) {\r\n                if (hasAttribute(parent.children[i], \"_repeat\")) {\r\n                    target = parent.children[i];\r\n                    break;\r\n                }\r\n            }\r\n            clone.removeAttribute(\"_repeat\");\r\n            //创建评论节点替代目标节点，这个节点的作用用于定位，好让循环出来的数据插入它之前\r\n            var start_comment = document.createComment(\"_repeat start\");\r\n            var end_comment = document.createComment(\"_repeat end\");\r\n            parent.replaceChild(end_comment, target);\r\n            parent.insertBefore(start_comment, end_comment);\r\n            var outer = clone.outerHTML;\r\n\r\n            function renderRepeat(element, parent, outer, arg, mark) {\r\n                var rgx = new RegExp(\"(^|\\\\W)(\" + iteration + \"(\\\\.\\\\w+)*(?!'))(\\\\W|$)\", \"g\");\r\n                var _html = \"\";\r\n                for (var i = 0; i < arg.length; i++) {\r\n                    _html += outer.replace(rgx, function (val, item1, item2, item3, index, str) {\r\n                        var func = new Function(iteration, \"return \" + item2);\r\n                        return val.replace(new RegExp(item2, \"g\"), StringToAttrValue(func(arg[i])));\r\n                    }) + \"\\n\";\r\n                }\r\n                var _element = innerHTMLToElement(_html);\r\n                if (_element.length) {\r\n                    for (var i = 0, len = _element.length; i < len; i++) {\r\n                        this.traversalAndMount(_element[0]);\r\n                        parent.insertBefore(_element[0], mark);\r\n                    }\r\n                }\r\n                element.parentNode.parentNode.replaceChild(parent, element.parentNode);\r\n            }\r\n\r\n            var self = this;\r\n            renderRepeat.call(self, element, parent, outer, args.data[value], end_comment);\r\n\r\n            //监听数组变化\r\n            observe(args.data[value], function (name, newval, oldval) {\r\n                var parent = element.parentNode.cloneNode(true);\r\n                //    找到被插入的标记，这里是一个comment 内容为 _repeat start\r\n                var end_comment;\r\n                for (var i = 0, len = parent.children.length; i < len; i++) {\r\n                    if (parent.children[i].nodeType === 8 && parent.children[i].nodeValue === \"_repeat end\") {\r\n                        end_comment = parent.children[i];\r\n                        break;\r\n                    }\r\n                }\r\n                renderRepeat.call(self, element, parent, outer, args.data[value], end_comment);\r\n            })\r\n        },\r\n        //用于binding之间的通信\r\n        callbind: function (name, funcname, params) {\r\n            if (funcname === \"data\") {\r\n                for (var s in params) {\r\n                    binding.binds[name].args.data[s] = params[s];\r\n                }\r\n            } else {\r\n                binding.binds[name].args[funcname].apply(binding.binds[name].args.data, params);\r\n            }\r\n        },\r\n        //    遍历节点并挂载方法\r\n        traversalAndMount: function (element) {\r\n            var alldoms = [];\r\n            alldoms.push(element);\r\n            //子节点\r\n            var d;\r\n            //非递归版的遍历方法\r\n            while (d = alldoms.shift()) {\r\n                this.mount(d, this.args);\r\n                //如果节点带repeat，则其子节点不去处理单独处理\r\n                if (hasAttribute(d, \"_repeat\"))\r\n                    continue\r\n                var length = d.children.length;\r\n                if (length > 0) {\r\n                    while (length--) {\r\n                        //如果这些元素以后用不上的话，没必要保存，遍历过后的元素直接置为null\r\n                        alldoms.push(d.children[length]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var _b = new _binding(args);\r\n    binding.binds[args.id] = _b;\r\n    return binding.binds[args.id];\r\n}\r\n//保存binding实例，用作在binding之间的通信\r\nbinding.binds = {};\r\n//测试代码。用于获取内部的数据用于外部测试\r\nbinding.test = {};\r\n\r\nfunction startWith(target, str, ignorCase) {\r\n    var start_str = target.substr(0, str.length);\r\n    return ignorCase ? start_str.toLowerCase() === str.toLowerCase() : start_str === str;\r\n}\r\nfunction isFunction(obj) {\r\n    return Object.prototype.toString.call(obj) == '[object Function]';\r\n}\r\nfunction forEach(obj, callback) {\r\n    for (var i = 0, d; d = obj[i++];) {\r\n        callback(i, d, obj);\r\n    }\r\n}\r\nfunction hasClass(obj, cls) {\r\n    return obj.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\r\n}\r\nfunction addClass(obj, cls) {\r\n    if (!hasClass(obj, cls)) {\r\n        obj.className == \"\" ? obj.className = cls : obj.className += \" \" + cls;\r\n    }\r\n}\r\nfunction removeClass(obj, cls) {\r\n    if (hasClass(obj, cls)) {\r\n        var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\r\n        obj.className = obj.className.replace(reg, \" \");\r\n        obj.className = obj.className.replace(/  /g, \"\");\r\n    }\r\n}\r\n//在添加进数组时进行去重\r\nfunction dupArrayByAdd(arr, value) {\r\n    for (var i = arr.length - 1; i > -1; i--) {\r\n        if (value == arr[i]) {\r\n            return\r\n        }\r\n    }\r\n    arr.push(value);\r\n}\r\n//判断该节点是否包含属性\r\nfunction hasAttribute(elelemet, attr) {\r\n    for (var i = 0; i < elelemet.attributes.length; i++) {\r\n        if (elelemet.attributes[i].name == attr)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n//innerHTML转化为element,特例是innerHTML是一系列的li 返回的话应该是数组\r\nfunction innerHTMLToElement(html) {\r\n    var _element = document.createElement(\"div\");\r\n    _element.innerHTML = html;\r\n    if (_element.children.length > 0)\r\n        return _element.children;\r\n    else\r\n        return _element.firstChild;\r\n}\r\n//字符串添加单引号，数字不管\r\nfunction StringToAttrValue(obj) {\r\n    if (typeof obj === \"string\")\r\n        return \"'\" + obj + \"'\";\r\n    else\r\n        return obj;\r\n}\r\n//遍历节点，挂载方法\r\nfunction mount(element, args, mount) {\r\n    var alldoms = [];\r\n    alldoms.push(element);\r\n    //子节点\r\n    var d;\r\n    //非递归版的遍历方法\r\n    while (d = alldoms.shift()) {\r\n        mount(d, args);\r\n        //如果节点带repeat，则其子节点不去处理单独处理\r\n        if (hasAttribute(d, \"_repeat\"))\r\n            continue\r\n        var length = d.children.length;\r\n        if (length > 0) {\r\n            while (length--) {\r\n                //如果这些元素以后用不上的话，没必要保存，遍历过后的元素直接置为null\r\n                alldoms.push(d.children[length]);\r\n            }\r\n        }\r\n    }\r\n}\r\nmodule.exports = binding;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./vm.js\n ** module id = 2\n ** module chunks = 0\n **/","/* observejs --- By dnt http://kmdjs.github.io/\r\n * Github: https://github.com/kmdjs/observejs\r\n * MIT Licensed.\r\n */\r\n;\r\n(function (win) {\r\n    var observe = function (target, arr, callback) {\r\n        var _observe = function (target, arr, callback) {\r\n            if (!target.$observer) {\r\n                target.$observer = this;\r\n            }\r\n            var $observer = target.$observer;\r\n            var eventPropArr = [];\r\n            //监听数组操作方法\r\n            if (observe.isArray(target)) {\r\n                if (target.length === 0) {\r\n                    target.$observeProps = {};\r\n                    target.$observeProps.$observerPath = \"#\";\r\n                }\r\n                $observer.mock(target);\r\n            }\r\n            //监听对象属性变化\r\n            for (var prop in target) {\r\n                if (target.hasOwnProperty(prop)) {\r\n                    //支持只有两个参数\r\n                    if (callback) {\r\n                        if (observe.isArray(arr) && observe.isInArray(arr, prop)) {\r\n                            eventPropArr.push(prop);\r\n                            $observer.watch(target, prop);\r\n                        } else if (observe.isString(arr) && prop == arr) {\r\n                            eventPropArr.push(prop);\r\n                            $observer.watch(target, prop);\r\n                        }\r\n                    } else {\r\n                        eventPropArr.push(prop);\r\n                        $observer.watch(target, prop);\r\n                    }\r\n                }\r\n            }\r\n            $observer.target = target;\r\n            if (!$observer.propertyChangedHandler) {\r\n                $observer.propertyChangedHandler = [];\r\n            }\r\n            var propChanged = callback ? callback : arr;\r\n            $observer.propertyChangedHandler.push({\r\n                all: !callback,\r\n                propChanged: propChanged,\r\n                eventPropArr: eventPropArr\r\n            });\r\n        }\r\n        _observe.prototype = {\r\n            \"onPropertyChanged\": function (prop, value, oldValue, target, path) {\r\n                if (value !== oldValue && this.propertyChangedHandler) {\r\n                    var rootName = observe._getRootName(prop, path);\r\n                    for (var i = 0, len = this.propertyChangedHandler.length; i < len; i++) {\r\n                        var handler = this.propertyChangedHandler[i];\r\n                        if (handler.all || observe.isInArray(handler.eventPropArr, rootName) || rootName.indexOf(\"Array-\") === 0) {\r\n                            handler.propChanged.call(this.target, prop, value, oldValue, path);\r\n                        }\r\n                    }\r\n                }\r\n                if (prop.indexOf(\"Array-\") !== 0 && typeof value === \"object\") {\r\n                    this.watch(target, prop, target.$observeProps.$observerPath);\r\n                }\r\n            },\r\n            \"mock\": function (target) {\r\n                var self = this;\r\n                observe.methods.forEach(function (item) {\r\n                    target[item] = function () {\r\n                        var old = Array.prototype.slice.call(this, 0);\r\n                        var result = Array.prototype[item].apply(this, Array.prototype.slice.call(arguments));\r\n                        if (new RegExp(\"\\\\b\" + item + \"\\\\b\").test(observe.triggerStr)) {\r\n                            for (var cprop in this) {\r\n                                if (this.hasOwnProperty(cprop) && !observe.isFunction(this[cprop])) {\r\n                                    self.watch(this, cprop, this.$observeProps.$observerPath);\r\n                                }\r\n                            }\r\n                            //todo\r\n                            self.onPropertyChanged(\"Array-\" + item, this, old, this, this.$observeProps.$observerPath);\r\n                        }\r\n                        return result;\r\n                    };\r\n                });\r\n            },\r\n            \"watch\": function (target, prop, path) {\r\n                if (prop === \"$observeProps\" || prop === \"$observer\") return;\r\n                if (observe.isFunction(target[prop])) return;\r\n                if (!target.$observeProps) target.$observeProps = {};\r\n                if (path !== undefined) {\r\n                    target.$observeProps.$observerPath = path;\r\n                } else {\r\n                    target.$observeProps.$observerPath = \"#\";\r\n                }\r\n                var self = this;\r\n                var currentValue = target.$observeProps[prop] = target[prop];\r\n                Object.defineProperty(target, prop, {\r\n                    get: function () {\r\n                        return this.$observeProps[prop];\r\n                    },\r\n                    set: function (value) {\r\n                        var old = this.$observeProps[prop];\r\n                        this.$observeProps[prop] = value;\r\n                        self.onPropertyChanged(prop, value, old, this, target.$observeProps.$observerPath);\r\n                    }\r\n                });\r\n                if (typeof currentValue == \"object\") {\r\n                    if (observe.isArray(currentValue)) {\r\n                        this.mock(currentValue);\r\n                        if (currentValue.length === 0) {\r\n                            if (!currentValue.$observeProps) currentValue.$observeProps = {};\r\n                            if (path !== undefined) {\r\n                                currentValue.$observeProps.$observerPath = path;\r\n                            } else {\r\n                                currentValue.$observeProps.$observerPath = \"#\";\r\n                            }\r\n                        }\r\n                    }\r\n                    for (var cprop in currentValue) {\r\n                        if (currentValue.hasOwnProperty(cprop)) {\r\n                            this.watch(currentValue, cprop, target.$observeProps.$observerPath + \"-\" + prop);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new _observe(target, arr, callback)\r\n    }\r\n    observe.methods = [\"concat\", \"every\", \"filter\", \"forEach\", \"indexOf\", \"join\", \"lastIndexOf\", \"map\", \"pop\", \"push\", \"reduce\", \"reduceRight\", \"reverse\", \"shift\", \"slice\", \"some\", \"sort\", \"splice\", \"unshift\", \"toLocaleString\", \"toString\", \"size\"]\r\n    observe.triggerStr = [\"concat\", \"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\", \"size\"].join(\",\")\r\n    observe.isArray = function (obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Array]';\r\n    }\r\n    observe.isString = function (obj) {\r\n        return typeof obj === \"string\";\r\n    }\r\n    observe.isInArray = function (arr, item) {\r\n        for (var i = arr.length; --i > -1;) {\r\n            if (item === arr[i]) return true;\r\n        }\r\n        return false;\r\n    }\r\n    observe.isFunction = function (obj) {\r\n        return Object.prototype.toString.call(obj) == '[object Function]';\r\n    }\r\n    observe.twoWay = function (objA, aProp, objB, bProp) {\r\n        if (typeof objA[aProp] === \"object\" && typeof objB[bProp] === \"object\") {\r\n            observe(objA, aProp, function (name, value) {\r\n                objB[bProp] = this[aProp];\r\n            })\r\n            observe(objB, bProp, function (name, value) {\r\n                objA[aProp] = this[bProp];\r\n            })\r\n        } else {\r\n            observe(objA, aProp, function (name, value) {\r\n                objB[bProp] = value;\r\n            })\r\n            observe(objB, bProp, function (name, value) {\r\n                objA[aProp] = value;\r\n            })\r\n        }\r\n    }\r\n    observe._getRootName = function (prop, path) {\r\n        if (path === \"#\") {\r\n            return prop;\r\n        }\r\n        return path.split(\"-\")[1];\r\n    }\r\n\r\n    observe.add = function (obj, prop, value) {\r\n        obj[prop] = value;\r\n        var $observer = obj.$observer;\r\n        $observer.watch(obj, prop);\r\n    }\r\n    Array.prototype.size = function (length) {\r\n        this.length = length;\r\n    }\r\n\r\n    if (typeof module != 'undefined' && module.exports && this.module !== module) {\r\n        module.exports = observe\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(observe)\r\n    }\r\n    else {\r\n        win.observe = observe\r\n    }\r\n    ;\r\n})(Function('return this')());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./observe.js\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 4\n ** module chunks = 0\n **/"],"sourceRoot":""}